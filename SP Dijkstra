# java



import java.util.Scanner;
class graphD{
	int n;
	int adj[][];
	int visited[];
	int d[];
	static final int infinity=999;
	public void creategraph(){
		Scanner sc =new Scanner(System.in);
		System.out.println("Enter the no. of nodes in graph");
		n=sc.nextInt();
		int i,j;
		adj=new int[n+1][n+1];
		System.out.println("Enter cost adjecency matrix for graph");
		System.out.println("if two nodes are not connected enter 999 ");
		for(i=1;i<n+1;i++)
			for(j=1;j<n+1;j++)
				adj[i][j]=sc.nextInt();
		
		visited = new int[n+1];
		d=new int[n+1];			
	}
	
	public void findpath(){
		int source,i,j;
		Scanner sc =new Scanner(System.in);
		for(i=0;i<n+1;i++) {
			visited[i]=0;
			d[i]=infinity;
		}
		System.out.println("Enter the index of source node");
		source=sc.nextInt();
		visited[source]=1;
		d[source]=0;
		int u=source;
		int v,minnode;
		for(i=2;i<n+1;i++)
		{
			for(v=1;v<n+1;v++)
				if(visited[v]==0 && d[v]>d[u]+adj[u][v])
					d[v]=d[u]+adj[u][v];
			
			minnode=0;		
			for(j=1;j<n+1;j++)
				if (visited[j]==0 &&d[j]<d[minnode])
					minnode=j;
			if(d[minnode]<infinity)
				visited[minnode]=1;
			else
				break;
			u=minnode;
		}
		for(i=1;i<n+1;i++)
			System.out.println("distance from source to " +i+ " is "+d[i]);
	
	}
}

public class SPDijkstra {

	public static void main(String[] args) {
			graphD graph= new graphD();
			graph.creategraph();
			graph.findpath();

	}
}
